##########################################
# Copyright (c) Javier Cabero Guerra 2018
# Licensed under MIT
##########################################

from mnist_classifier import MNISTClassifier
import numpy as np

model = MNISTClassifier()


def predict_raw_array():
    sample_8_raw
    sample_8 = np.asarray(sample_8_raw)

    # Generate string for API call
    sample_8_raw_flatten = [item for sublist in sample_8_raw for item in sublist]
    sample_8_raw_flatten_srt = ','.join(map(str, sample_8_raw_flatten))
    sample_8_raw_flatten_srt = sample_8_raw_flatten_srt.replace('[','')
    sample_8_raw_flatten_srt = sample_8_raw_flatten_srt.replace(']','')
    print(sample_8_raw_flatten_srt)
        
    print(sample_8.shape)
    print(model.predict(sample_8))

def predict_from_srt_array():
    str_array_raw = '0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.04313726,0.79607844,0.8980392,0.1254902,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.10196079,0.18431373,0.18431373,0.11764706,0.37254903,0.99607843,0.84313726,0.05098039,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.1764706,0.6039216,0.7254902,0.7254902,0.8745098,0.99215686,0.99215686,0.52156866,0.6862745,1.0,0.7372549,0.07450981,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.43137255,0.99215686,0.99215686,0.99215686,0.9647059,0.6313726,0.89411765,0.99215686,0.99215686,0.99607843,0.36078432,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.5019608,0.9607843,0.99215686,0.61960787,0.5372549,0.08235294,0.0,0.1882353,0.9137255,0.99215686,0.9137255,0.03137255,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.54509807,0.99607843,0.8745098,0.09803922,0.0,0.0,0.14117648,0.6666667,0.99607843,0.95686275,0.41568628,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.21568628,0.83137256,0.99215686,0.6313726,0.04313726,0.10196079,0.69803923,0.99215686,0.9254902,0.44313726,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.02745098,0.60784316,0.99215686,0.89411765,0.3137255,0.8745098,0.99215686,0.99215686,0.42745098,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.5529412,0.99215686,0.99215686,0.99215686,0.99607843,0.99215686,0.6039216,0.11372549,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.43137255,0.99215686,0.99215686,0.99215686,0.99607843,0.7019608,0.14901961,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.01176471,0.67058825,0.99607843,0.99607843,0.99607843,0.7019608,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.67058825,0.99215686,0.99215686,0.99215686,0.99215686,0.69803923,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.10196079,0.48235294,0.99607843,0.99215686,0.79607844,0.6117647,0.99215686,0.78431374,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.3647059,0.99215686,0.99607843,0.4745098,0.05098039,0.3647059,0.99215686,0.61960787,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.2509804,0.9372549,0.99215686,0.29803923,0.03137255,0.1254902,0.85882354,0.99215686,0.49411765,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.52156866,0.99607843,0.7490196,0.0,0.01960784,0.42352942,0.91764706,0.99607843,0.41568628,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.5176471,0.99215686,0.74509805,0.01960784,0.33333334,0.99215686,0.9254902,0.6039216,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.6,0.99215686,0.6627451,0.7529412,0.99215686,0.99215686,0.3019608,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.4392157,0.99215686,0.99215686,0.99607843,0.9254902,0.5058824,0.03529412,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.06666667,0.4627451,0.9529412,0.7490196,0.44313726,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0'
    str_array_flat = np.fromstring(str_array_raw, sep=',', dtype=np.float32, count=784)
    str_array_flat = str_array_flat.clip(min=0)
    srt_array = str_array_flat.reshape(28, 28, 1)
    print(srt_array.shape)
    print(model.predict(srt_array))



#predict_raw_array()
predict_from_srt_array()